[x] Iteration 1: Front-end template (basic setup, dependencies etc)  
	[x] base Angular 2 project with angular cli  
  
[x] Iteration 2: Back-end template  
	[x] base node project - use express  

[x] Iteration 3: requirements + outline acceptance tests
	[x] Create feature files
	[x] Create complete suite (first draft) of failing Protractor tests based on feature files
  
[-] Iteration 4: e2e MVP (unstyled, no server calls) - get all protractor tests passing but will look crap and use faked data  
	[x] home.feature
	[x] viewCardSelection.feature
	[x] navigateToCardDetail.feature
	[-] viewCardDetails.feature
		- should delete the "Jon Snow" card from my collection has a pretty weak test at the moment - maybe navigate back to the selection view and see that its missing?
	[] navigateToCardSelection.feature
	[] tearUpCard.feature
		- update this with navigating to the card selection and not seeing it there?

[-] Iteration 5: e2e MVP no styles (still unstyled, make real server calls)
	[-] viewCardSelection.feature
		- proper centering would be better
	[-] viewCardDetails.feature
	[] tearUpCard.feature

[] Iteration 6: complete MVP by adding styles
  
[] Unsorted  
	[] Responsive  
	[] Card customisation  
	[] Support for CRUD operations  
	[] Simple animated transitions between views  
	[] Enable navigation using the browser back/forward buttons  
	[] Push to Github pages  
	[] enable deeplinking by implementing HTML5 pushstate (or just use a HashLocationStrategy)
		- re-add deep link in card selection page file and re-add navigateTo override in home page file if we implement pushstate and allow for deep linking
	- e2e tests need to be 1 command not 2
	-	implement linting in Vim
	- possibly change my build setup as follows: https://github.com/angular/angular-cli#proxy-to-backend
		- then we can have the express project as a seperate repo and add it as a submodule
		- then we can update README with ng commands (these have live reload built in)
	- mock the CardService once we start doing real work with it
